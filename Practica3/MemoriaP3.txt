Ya seeee que la tengo que pasar a word xd.

Ej2

En este programa se crean tantos procesos hijos como se pasen como argumento de entrada y cada hijo es el encargado de dar de alta a un cliente. Para dar de alta a un cliente primero se mira en la memoria compartida cual es el id que le toca, luego se obtiene su nombre por teclado y acto seguido se añade a la memoria compartida.
Finalmente es el padre quien, al recibir la señal que le manda el hijo tras dar de alta a un cliente, lee la informacion del cliente y la imprime por pantalla.

El problema de este ejercicio está en que no se protege la memoria compartida y se produce lo que se llama condicion de carrera. Segun como de rapidos sean unos procesos u otros podria haber diferentes resultados. A pesar de que a nosotros experimentalmente siempre nos sale lo mismo puesto que no somos lo suficientemente rapidos escribiendo con el teclado, esta no es una buena técnica de programación. Para arreglarlo habría que incluir unos semáforos que protegiesen el acceso a la memoria compartida y esto es precisamente lo que hemos hecho en el ejercicio2?solved.c

Ej3

De este ejercicio hay poco que comentar puesto que no se usa nada diferente a lo usado en el ejercicio 2. Es un programa que implementa el problema del productor consumidor. Para ello utilizamos memoria compartida y semaforos al igual que en el ejercicio anterior.

Ej4

En este programa se pide que se invoquen a dos hilos: el primero escribe en un fichero numeros aleatorios y el segundo lee este fichero y lo imprime por pantalla cambiando las comas por espacios. Para conseguir esto hemos mapeado el contenido del fichero en memoria usando la función mmap.

Ej5

En este ejercicio se pide hacer un programa en el que 3 procesos se van pasando información entre sí a través de una cola de mensajes.
El proceso A va leyendo del primer fichero pasado por parámetro y va mandando la información que lee al proceso B. Éste lee esa información de la cola de mensajes, la transforma y se la pasa al proceso C. Por último, el proceso C lee la informacion obteniendo el mensaje de la cola de mensajes y la imprime en el segundo fichero pasado como argumento de entrada.

Decisiones de diseño y puntos a comentar:
- Primero aclarar que a pesar de que en el enunciado pone que los trozos del fichero que se leen tienen que ser 16KB hemos supuesto que esto es una errata puesto que se necesitaría un fichero inmensamente grande y hemos hecho el ejercicio leyendo de 16B.
- Hemos utilizado el parámetro id de la estructura de mensajes para diferenciar entre dos tipos de mensajes: El de id 1 es el que le pasa el proceso A al proceso B y está todavía sin modificar, mientras que el de id 2 es el que le pasa el proceso B al C y está ya modificado.
- Además, hemos añadido un parámetro a la estructura de mensaje. Este parametro es 'ultimo' y es el método que hemos usado nosotros para ver cual es el último mensaje. Cuando este parámetro está a 1 significa que ya no va a haber mas mensajes partiendo de ese proceso.
- Por ultimo decir que incluimos el archivo "entrada.txt" para probar el correcto funcionamiento del ejercicio.
